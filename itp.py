import random
import telebot
from telebot.types import Message, ReplyKeyboardMarkup, KeyboardButton
import threading
import time
from datetime import datetime, timedelta
import json

with open("kick.json", "r") as json_file:
    a = json.load(json_file)


TELEGRAM_TOKEN = a["telegram_token"]
bot = telebot.TeleBot(TELEGRAM_TOKEN)


user_data = {}
reminders = {}

challenges = [
    "–°–¥–µ–ª–∞—Ç—å 100 –æ—Ç–∂–∏–º–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞—Ç—å 100 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π",
    "–°–¥–µ–ª–∞—Ç—å 50 –ø–æ–¥—Ç—è–≥–∏–≤–∞–Ω–∏–π",
    "–ü—Ä–æ–±–µ–∂–∞—Ç—å 5 –∫–º",
    "–í—Å—Ç–∞—Ç—å –≤ –ø–ª–∞–Ω–∫—É –Ω–∞ 5 –º–∏–Ω—É—Ç",
    "–û—Ç–∫–∞–∑–∞—Ç—å—Å—è –æ—Ç —Å–ª–∞–¥–∫–æ–≥–æ –Ω–∞ 3 –¥–Ω—è",
    "–°–¥–µ–ª–∞—Ç—å 200 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ —Å–∫–∞–∫–∞–ª–∫–µ",
    "–ü—Ä–æ–π—Ç–∏ 10 000 —à–∞–≥–æ–≤ –∑–∞ –¥–µ–Ω—å"
]

def reminder_checker():
    while True:
        now = datetime.now()
        for user_id, user_reminders in list(reminders.items()):
            for reminder in user_reminders:
                reminder_time, message = reminder
                if now >= reminder_time:
                    bot.send_message(user_id, f"‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: *{message}*")
                    reminders[user_id].remove(reminder)
            if not reminders[user_id]:
                del reminders[user_id]
        time.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥

@bot.message_handler(commands=['start'])
def start_message(message: Message):
    bot.send_message(
        message.chat.id,
        "üëã *–ü—Ä–∏–≤–µ—Ç!* –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —Å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞–º–∏ –∏ —á–µ–ª–ª–µ–Ω–¥–∂–∞–º–∏! üéØ\n\n"
        "üìù –ü–æ–º–æ–≥–∏ –Ω–∞–º —Å—Ç–∞—Ç—å –ª—É—á—à–µ, –Ω–∞–ø–∏—à–∏ –æ—Ç–∑—ã–≤ —Å—é–¥–∞ /reviews !\n"
        "üìå –¢–∞–∫–∂–µ —è –º–æ–≥—É –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞—Ö. –ù–∞–ø–∏—à–∏ '–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ'!"
    )
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")
    user_data[message.chat.id] = {"name": message.text}
    bot.register_next_step_handler(message, func)

def func(message: Message):
    markup = ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = KeyboardButton("üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢")
    btn2 = KeyboardButton("‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
    btn3 = KeyboardButton("üì∏ –§–æ—Ç–æ –µ–¥—ã")
    btn4 = KeyboardButton("üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è")
    markup.add(btn1, btn2, btn3, btn4)
    bot.send_message(message.chat.id, "üëá –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=markup)

@bot.message_handler(func=lambda message: message.text == "üìä –†–∞—Å—Å—á–∏—Ç–∞—Ç—å –ò–ú–¢")
def ask_height(message: Message):
    bot.send_message(message.chat.id, "üìè –í–≤–µ–¥–∏—Ç–µ –≤–∞—à *—Ä–æ—Å—Ç* (–≤ —Å–º):")
    bot.register_next_step_handler(message, ask_weight)

def ask_weight(message: Message):
    try:
        height = float(message.text)
        user_data[message.chat.id]["height"] = height
        bot.send_message(message.chat.id, "‚öñÔ∏è –¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à *–≤–µ—Å* (–≤ –∫–≥):")
        bot.register_next_step_handler(message, calculate_bmi)
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ *—á–∏—Å–ª–æ* –¥–ª—è —Ä–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 175).")
        bot.register_next_step_handler(message, ask_weight)

def calculate_bmi(message: Message):
    try:
        weight = float(message.text)
        height = user_data[message.chat.id]["height"] / 100
        bmi = weight / (height ** 2)
        bot.send_message(
            message.chat.id,
            f"üßÆ –í–∞—à *–ò–ú–¢*: `{bmi:.2f}`\n\n"
            "üîπ _–ù–æ—Ä–º–∞_: 18.5 - 24.9\n"
            "üîπ _–ò–∑–±—ã—Ç–æ—á–Ω—ã–π –≤–µ—Å_: 25 - 29.9\n"
            "üîπ _–û–∂–∏—Ä–µ–Ω–∏–µ_: 30+"
        )
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå –í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ *—á–∏—Å–ª–æ* –¥–ª—è –≤–µ—Å–∞.")
        bot.register_next_step_handler(message, calculate_bmi)

@bot.message_handler(func=lambda message: message.text == "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ")
def set_reminder_prompt(message: Message):
    bot.send_message(
        message.chat.id,
        "‚è≥ –í–≤–µ–¥–∏—Ç–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ: `HH:MM –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è`\n\n"
        "üìå *–ü—Ä–∏–º–µ—Ä:* `07:30 –£—Ç—Ä–µ–Ω–Ω—è—è —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞`"
    )
    bot.register_next_step_handler(message, set_reminder)

def set_reminder(message: Message):
    try:
        parts = message.text.split(maxsplit=1)
        if len(parts) < 2:
            bot.send_message(message.chat.id, "‚ùå *–û—à–∏–±–∫–∞!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `HH:MM –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞ –≤ –∑–∞–ª–µ`")
            return

        time_str, reminder_text = parts[0], parts[1]
        reminder_time = datetime.strptime(time_str, "%H:%M").time()
        now = datetime.now()
        reminder_datetime = datetime.combine(now.date(), reminder_time)

        if reminder_datetime < now:
            reminder_datetime += timedelta(days=1)

        user_id = message.chat.id
        if user_id not in reminders:
            reminders[user_id] = []
        reminders[user_id].append((reminder_datetime, reminder_text))

        bot.send_message(user_id, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ *{time_str}*: _{reminder_text}_")
    except ValueError:
        bot.send_message(message.chat.id, "‚ùå *–û—à–∏–±–∫–∞!* –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ñ–æ—Ä–º–∞—Ç: `HH:MM –¢–µ–∫—Å—Ç`.")

@bot.message_handler(func=lambda message: message.text == "üì∏ –§–æ—Ç–æ –µ–¥—ã")
def photo_kcal(message: Message):
    bot.send_message(message.chat.id, "üì∑ –°—Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—Ä—É–π—Ç–µ –≤–∞—à –ø—Ä–∏–µ–º –ø–∏—â–∏!")

@bot.message_handler(func=lambda message: message.text == "üî• –ß–µ–ª–ª–µ–Ω–¥–∂ –¥–Ω—è")
def challengs(message: Message):
    challenge = random.choice(challenges)
    bot.send_message(message.chat.id, f"üî• –¢–≤–æ–π —á–µ–ª–ª–µ–Ω–¥–∂: {challenge}")



if __name__ == "__main__":
    threading.Thread(target= reminder_checker, daemon=True).start()
    bot.polling(none_stop=True)
